rm(list=ls())
library(data.table)
library(mlr)
data_input_dir = "02_data/input/"
data_intermediate_dir = "02_data/intermediate/"
data_output_dir = "02_data/output/"
SPREAD = 1 # [1,2,3]
MAXTRADETIME = 8 # [4,6,8]
SL = 20 # [10,20,30]
STARTHOUR = 9
pair = 'eurusd'
target = 'sell'
dt = fread(paste0(data_output_dir,'preprop_featsel_',pair,'_targ_',target,'_SL_',SL,'_SPREAD_',SPREAD,'_MAXTRADETIME_',MAXTRADETIME,'.csv'))
install.packages("mlr")
rm(list=ls())
library(data.table)
library(mlr)
data_input_dir = "02_data/input/"
data_intermediate_dir = "02_data/intermediate/"
data_output_dir = "02_data/output/"
SPREAD = 1 # [1,2,3]
MAXTRADETIME = 8 # [4,6,8]
SL = 20 # [10,20,30]
STARTHOUR = 9
pair = 'eurusd'
target = 'sell'
dt = fread(paste0(data_output_dir,'preprop_featsel_',pair,'_targ_',target,'_SL_',SL,'_SPREAD_',SPREAD,'_MAXTRADETIME_',MAXTRADETIME,'.csv'))
View(dt)
dt$target
dt$target <- as.factor(dt$target)
task = makeClassifTask( data = dt, target =
"target")
names(dt)
dt$V1 <- NULL
dt$target <- as.factor(dt$target)
task = makeClassifTask( data = dt, target ="target")
task = makeClassifTask( data = as.data.frame(dt), target ="target")
lrn = makeLearner("classif.lda")
resamp_desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(dat), skip = .01)
resamp_desc = makeResampleDesc("GrowingCV", horizon = 10L,
initial.window = .90,
size = nrow(dt), skip = .01)
resamp_desc = makeResampleDesc("GrowingWindowCV", horizon = 10L,
initial.window = .90,
size = nrow(dt), skip = .01)
resamp_desc = makeResampleDesc("GrowingWindowCV", horizon = 10L,
initial.window = .90,
skip = .01)
resamp_arm = resample(lrn,task, resamp_desc, measures = auc)
lrn = makeLearner("classif.xgboost")
resamp_arm = resample(lrn,task, resamp_desc, measures = auc)
lrn = makeLearner("classif.xgboost", predict.type = "prob")
resamp_arm = resample(lrn,task, resamp_desc, measures = auc)
resamp_desc = makeResampleDesc("GrowingWindowCV", horizon = 10L,
initial.window = .30,
skip = 10)
resamp_arm = resample(lrn,task, resamp_desc, measures = auc)
